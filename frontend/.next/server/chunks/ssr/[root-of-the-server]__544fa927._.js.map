{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///Users/arjohncapucion/Documents/dashboard-project/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\n\nconst API_URL = 'http://localhost:8000';\n\n// Create axios instance with retry configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(\n  config => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  error => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for better error handling\napi.interceptors.response.use(\n  response => response,\n  async (error: AxiosError) => {\n    // Create a more user-friendly error message\n    const errorMessage = getErrorMessage(error);\n    console.error('API Response Error:', errorMessage, error);\n    \n    // Attach user-friendly message to error\n    if (error.response) {\n      (error as any).userMessage = errorMessage;\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Helper function to get a user-friendly error message\nconst getErrorMessage = (error: AxiosError): string => {\n  if (error.message === 'Network Error') {\n    return 'Cannot connect to the server. Please check if the backend is running (port 8000).';\n  }\n  \n  if (error.response) {\n    // Server responded with error status\n    const status = error.response.status;\n    if (status === 404) {\n      return 'The requested resource was not found.';\n    } else if (status === 500) {\n      return 'Server error. Please try again later.';\n    } else {\n      return `Error: ${error.response.data.detail || error.message}`;\n    }\n  }\n  \n  if (error.request) {\n    // Request was made but no response received\n    return 'No response from server. Please check your connection.';\n  }\n  \n  // Something else caused the error\n  return error.message || 'An unknown error occurred';\n};\n\nexport interface FileInfo {\n  file_id: string;\n  filename: string;\n  upload_time: string;\n  size: string;\n  column_count: number;\n  row_count: number;\n}\n\nexport interface CSVMetadata extends FileInfo {\n  columns: string[];\n  dtypes: Record<string, string>;\n  preview: Record<string, any>[];\n}\n\nexport interface ColumnStat {\n  name: string;\n  dtype: string;\n  count: number;\n  missing: number;\n  missing_pct: number;\n  unique: number;\n  min?: number;\n  max?: number;\n  mean?: number;\n  median?: number;\n  std?: number;\n}\n\nexport interface FileStats {\n  file_id: string;\n  columns: ColumnStat[];\n}\n\nexport interface Visualization {\n  [key: string]: any;\n}\n\nexport interface CorrelationData {\n  correlations: {\n    x: string;\n    y: string;\n    correlation: number;\n  }[];\n  visualization: any;\n  columns: string[];\n}\n\n/**\n * Generic API request function with retry logic\n */\nconst apiRequest = async <T>(request: () => Promise<T>, retries = 2): Promise<T> => {\n  try {\n    return await request();\n  } catch (error) {\n    if (retries > 0 && axios.isAxiosError(error) && (error.message === 'Network Error' || error.code === 'ECONNABORTED')) {\n      console.log(`Retrying... (${retries} attempts left)`);\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\n      return apiRequest(request, retries - 1);\n    }\n    throw error;\n  }\n};\n\n// File upload\nexport const uploadCSV = async (file: File): Promise<FileInfo> => {\n  return apiRequest(async () => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await axios.post(`${API_URL}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    \n    return response.data;\n  });\n};\n\n// Get list of uploaded files\nexport const getUploadedFiles = async (): Promise<FileInfo[]> => {\n  return apiRequest(async () => {\n    const response = await api.get('/files');\n    return response.data;\n  });\n};\n\n// Get file metadata\nexport const getFileMetadata = async (fileId: string): Promise<CSVMetadata> => {\n  return apiRequest(async () => {\n    const response = await api.get(`/files/${fileId}`);\n    return response.data;\n  });\n};\n\n// Get file statistics\nexport const getFileStats = async (fileId: string): Promise<FileStats> => {\n  return apiRequest(async () => {\n    const response = await api.get(`/files/${fileId}/stats`);\n    return response.data;\n  });\n};\n\n// Get column visualization\nexport const getColumnVisualization = async (fileId: string, column: string): Promise<Visualization> => {\n  return apiRequest(async () => {\n    const response = await api.get(`/files/${fileId}/visualizations/${column}`);\n    return response.data;\n  });\n};\n\n// Get correlation data\nexport const getCorrelation = async (fileId: string): Promise<CorrelationData> => {\n  return apiRequest(async () => {\n    const response = await api.get(`/files/${fileId}/correlation`);\n    return response.data;\n  });\n};\n\nexport default api; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/arjohncapucion/Documents/dashboard-project/frontend/src/context/CSVContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { getUploadedFiles, FileInfo } from '@/services/api';\n\ninterface CSVContextType {\n  files: FileInfo[];\n  selectedFileId: string | null;\n  loading: boolean;\n  error: string | null;\n  refreshFiles: () => Promise<void>;\n  selectFile: (fileId: string) => void;\n  clearSelectedFile: () => void;\n}\n\nconst CSVContext = createContext<CSVContextType | undefined>(undefined);\n\nexport function CSVProvider({ children }: { children: ReactNode }) {\n  const [files, setFiles] = useState<FileInfo[]>([]);\n  const [selectedFileId, setSelectedFileId] = useState<string | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const refreshFiles = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await getUploadedFiles();\n      setFiles(data);\n    } catch (error) {\n      console.error('Error fetching files:', error);\n      setError('Failed to load files. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectFile = (fileId: string) => {\n    setSelectedFileId(fileId);\n  };\n\n  const clearSelectedFile = () => {\n    setSelectedFileId(null);\n  };\n\n  useEffect(() => {\n    refreshFiles();\n  }, []);\n\n  return (\n    <CSVContext.Provider\n      value={{\n        files,\n        selectedFileId,\n        loading,\n        error,\n        refreshFiles,\n        selectFile,\n        clearSelectedFile\n      }}\n    >\n      {children}\n    </CSVContext.Provider>\n  );\n}\n\nexport function useCSV() {\n  const context = useContext(CSVContext);\n  if (context === undefined) {\n    throw new Error('useCSV must be used within a CSVProvider');\n  }\n  return context;\n} "],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAeA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA8B;AAEtD,SAAS,YAAY,EAAE,QAAQ,EAA2B;IAC/D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACjD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACpE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,eAAe;QACnB,IAAI;YACF,WAAW;YACX,SAAS;YACT,MAAM,OAAO,MAAM,CAAA,GAAA,sHAAA,CAAA,mBAAgB,AAAD;YAClC,SAAS;QACX,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,SAAS;QACX,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,aAAa,CAAC;QAClB,kBAAkB;IACpB;IAEA,MAAM,oBAAoB;QACxB,kBAAkB;IACpB;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC,WAAW,QAAQ;QAClB,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;QACF;kBAEC;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}